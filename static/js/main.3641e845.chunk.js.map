{"version":3,"sources":["constants/index.ts","utils/bungie-api.ts","utils/oauth-tokens.ts","contexts/user-context/index.tsx","contexts/manifest-context/index.tsx","utils/oauth.ts","pages/callback/index.tsx","components/login/index.tsx","pages/home/index.tsx","pages/not-found/index.tsx","App.tsx","index.tsx"],"names":["CLIENT_ID","API_KEY","BASE_URL","bungieGet","path","user","params","a","console","log","searchParams","URLSearchParams","url","fetch","method","headers","Authorization","accessToken","value","then","response","ok","json","Promise","reject","getManifest","manifestResponse","Response","manifestLink","jsonWorldContentPaths","rawManifest","rawManifestJSON","localStorageKey","getToken","tokenString","localStorage","getItem","JSON","parse","setToken","token","setItem","stringify","hasTokenExpired","expires","Object","prototype","hasOwnProperty","call","inception","getTokenExpiration","Date","now","defaultUserContextValue","setUser","profile","setProfile","UserContext","createContext","UserContextManager","children","useState","setUserBase","useCallback","t","removeItem","useEffect","contextValue","useMemo","Provider","defaultManifestContextValue","manifest","ManifestContext","ManifestContextManager","useContext","setManifest","fullManifest","reducedManifest","DestinyClassDefinition","DestinyInventoryItemDefinition","fetchManifest","TOKEN_URL","getAccessTokenFromCode","code","body","grant_type","client_id","resolve","handleAccessToken","access_token","data","tokens","expires_in","name","bungieMembershipId","membership_id","refresh_token","refreshToken","refresh_expires_in","Error","Callback","navigate","useNavigate","useSearchParams","handleAuthReturn","state","authorizationState","get","Login","authorizationURL","uuidv4","queryParams","response_type","className","rel","onClick","href","Home","characters","entries","map","id","char","light","src","emblemBackgroundPath","alt","NotFound","to","App","element","process","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.3641e845.chunk.js","sourcesContent":["export const CLIENT_ID = \"38587\";\nexport const API_KEY = \"21eef78849844426a9855a108fc1ba3a\";\nexport const BASE_URL = \"https://www.bungie.net/Platform\";\n\nexport const manifestHashes = {\n  DestinyAchievementDefinition: \"achievementHash\",\n  DestinyActivityDefinition: \"activityHash\",\n  DestinyActivityBundleDefinition: \"bundleHash\",\n  DestinyActivityGraphDefinition: \"activityGraphHash\",\n  DestinyActivityInteractableDefinition: \"activityInteractableHash\",\n  DestinyActivityModeDefinition: \"activityModeHash\",\n  DestinyActivityModifierDefinition: \"modifierHashes\",\n  DestinyActivityTypeDefinition: \"activityTypeHash\",\n  DestinyArtDyeChannelDefinition: \"artDyeChannelHash\",\n  DestinyArtDyeReferenceDefinition: \"artDyeReferenceHash\",\n  DestinyArtifactDefinition: \"artifactHash\",\n  DestinyBondDefinition: \"bondHash\",\n  DestinyBreakerTypeDefinition: \"breakerTypeHash\",\n  DestinyCharacterCustomizationCategoryDefinition: \"characterCustomizationCategoryHash\",\n  DestinyCharacterCustomizationOptionDefinition: \"characterCustomizationOptionHash\",\n  DestinyChecklistDefinition: \"checklists\",\n  DestinyClassDefinition: \"classHash\",\n  DestinyCollectibleDefinition: \"collectibleHash\",\n  DestinyDamageTypeDefinition: \"damageTypeHash\",\n  DestinyDestinationDefinition: \"destinationHash\",\n  DestinyDirectorBookDefinition: \"bookHash\",\n  DestinyEnemyRaceDefinition: \"raceHash\",\n  DestinyEnergyTypeDefinition: \"energyTypeHash\",\n  DestinyEntitlementOfferDefinition: \"entitlementOfferHash\",\n  DestinyEquipmentSlotDefinition: \"equipmentSlotHash\",\n  DestinyFactionDefinition: \"factionHash\",\n  DestinyGenderDefinition: \"genderHash\",\n  DestinyGrimoireCardDefinition: \"cardId\",\n  DestinyHistoricalStatsDefinition: \"statId\",\n  DestinyInventoryBucketDefinition: \"bucketHash\",\n  DestinyInventoryItemDefinition: \"itemHash\",\n  DestinyInventoryItemLiteDefinition: \"itemLiteHash\",\n  DestinyItemCategoryDefinition: \"itemCategoryHashes\",\n  DestinyItemTierTypeDefinition: \"tierTypeHash\",\n  DestinyLocationDefinition: \"locationHash\",\n  DestinyLoreDefinition: \"loreHash\",\n  DestinyMaterialRequirementSetDefinition: \"materialRequirementHashes\",\n  DestinyMedalTierDefinition: \"medalTierHashes\",\n  DestinyMetricDefinition: \"metricHash\",\n  DestinyMilestoneDefinition: \"milestoneHash\",\n  DestinyNodeStepSummaryDefinition: \"nodeStepSummaryHash\",\n  DestinyObjectiveDefinition: \"objectiveHash\",\n  DestinyPlaceDefinition: \"placeHash\",\n  DestinyPlatformBucketMappingDefinition: \"platformBucketMappingHash\",\n  DestinyPlugSetDefinition: \"plugs\",\n  DestinyPowerCapDefinition: \"powerCapHash\",\n  DestinyPresentationNodeDefinition: \"presentationNodeHash\",\n  DestinyProgressionDefinition: \"progressionHash\",\n  DestinyProgressionLevelRequirementDefinition: \"progressionLevelRequirementHash\",\n  DestinyProgressionMappingDefinition: \"progressionMappingHash\",\n  DestinyRaceDefinition: \"raceHash\",\n  DestinyRecordDefinition: \"recordHash\",\n  DestinyReportReasonCategoryDefinition: \"reasonCategoryHashes\",\n  DestinyRewardAdjusterPointerDefinition: \"rewardAdjusterPointerHash\",\n  DestinyRewardAdjusterProgressionMapDefinition: \"rewardAdjusterProgressionMapHash\",\n  DestinyRewardItemListDefinition: \"rewardItemListHash\",\n  DestinyRewardMappingDefinition: \"rewardMappingHash\",\n  DestinyRewardSheetDefinition: \"rewardSheetHash\",\n  DestinyRewardSourceDefinition: \"sourceHashes\",\n  DestinySackRewardItemListDefinition: \"sackRewardItemListHash\",\n  DestinySandboxPatternDefinition: \"sandboxPatternHash\",\n  DestinySandboxPerkDefinition: \"perkHash\",\n  DestinyScriptedSkullDefinition: \"skullHash\",\n  DestinySeasonDefinition: \"currentSeasonHash\",\n  DestinySeasonPassDefinition: \"seasonPassHash\",\n  DestinySocketCategoryDefinition: \"socketCategoryHash\",\n  DestinySocketTypeDefinition: \"socketTypeHash\",\n  DestinySpecialEventDefinition: \"eventHash\",\n  DestinyStatDefinition: \"statHash\",\n  DestinyStatGroupDefinition: \"statGroupHash\",\n  DestinyTalentGridDefinition: \"talentGridHash\",\n  DestinyTraitCategoryDefinition: \"traitCategoryHash\",\n  DestinyTraitDefinition: \"traitHashes\",\n  DestinyUnlockCountMappingDefinition: \"unlockCountMappingHash\",\n  DestinyUnlockDefinition: \"unlockHash\",\n  DestinyUnlockEventDefinition: \"unlockEventHash\",\n  DestinyUnlockExpressionMappingDefinition: \"unlockExpressionMappingHash\",\n  DestinyUnlockFlagDefinition: \"flagHash\",\n  DestinyUnlockValueDefinition: \"hash\",\n  DestinyVendorDefinition: \"vendorHash\",\n  DestinyVendorCategoryDefinition: \"categoryHash\",\n  DestinyVendorGroupDefinition: \"vendorGroupHash\",\n};\n","import {\n  BungieMembershipType,\n  DestinyCharacterComponent,\n  DestinyComponentType,\n  DestinyLinkedProfilesResponse,\n  DestinyManifest,\n  DictionaryComponentResponse,\n  ServerResponse,\n} from \"bungie-api-ts/destiny2\";\nimport { API_KEY, BASE_URL } from \"../constants\";\nimport { Tokens } from \"./oauth-tokens\";\nimport { formatBungieName } from \"./stuff\";\n\nexport interface Profile {\n  displayName: string;\n  membershipId: string;\n  membershipType: BungieMembershipType;\n  lastPlayed: Date;\n  crossSaveOverride: BungieMembershipType;\n  isCrossSavePrimary: boolean;\n  isOverridden: boolean;\n  isPublic: boolean;\n}\n\nexport interface Characters {\n  [key: string]: DestinyCharacterComponent;\n}\n\nexport async function bungieGet(path: string, user: Tokens | null, params?: Record<string, any>) {\n  if (!user) {\n    console.log(\"user missing!\");\n    return;\n  }\n\n  const searchParams = new URLSearchParams(params);\n  const url = `${BASE_URL}${path}?${searchParams}`;\n  return fetch(url, {\n    method: \"GET\",\n    headers: {\n      \"X-API-Key\": API_KEY,\n      Authorization: \"Bearer \" + user.accessToken.value,\n    },\n  }).then((response) => (response.ok ? response.json() : Promise.reject(response)));\n}\n\nexport async function getManifest(user: Tokens | null) {\n  if (!user) {\n    console.log(\"user missing!\");\n    return;\n  }\n\n  const response: ServerResponse<DestinyManifest> = await bungieGet(\"/Destiny2/Manifest/\", user);\n  const manifestResponse = response.Response;\n  const manifestLink = manifestResponse.jsonWorldContentPaths[\"en\"];\n\n  const rawManifest = await fetch(`https://www.bungie.net${manifestLink}`);\n  const rawManifestJSON = await rawManifest.json();\n  return rawManifestJSON;\n}\n\nexport async function getDestinyProfile(user: Tokens | null) {\n  if (!user) {\n    console.log(\"user missing!\");\n    return;\n  }\n\n  const response: ServerResponse<DestinyLinkedProfilesResponse> = await bungieGet(\n    // @ts-ignore\n    `/Destiny2/${BungieMembershipType.BungieNext}/Profile/${user.bungieMembershipId}/LinkedProfiles/`,\n    user\n  );\n\n  // error check here maybe\n\n  const profilesResponse = response.Response;\n  const profiles: Profile[] = profilesResponse.profiles.map((account) => ({\n    displayName: formatBungieName(account),\n    membershipId: account.membershipId,\n    membershipType: account.membershipType,\n    lastPlayed: new Date(account.dateLastPlayed),\n    crossSaveOverride: account.crossSaveOverride,\n    isCrossSavePrimary: account.isCrossSavePrimary,\n    isOverridden: account.isOverridden,\n    isPublic: account.isPublic,\n  }));\n\n  if (profiles.length === 0) {\n    console.log(\"issue\");\n    return;\n  }\n\n  const sortedProfiles = profiles.sort((a, b) => b.lastPlayed.getTime() - a.lastPlayed.getTime());\n\n  return sortedProfiles[0];\n}\n\ninterface DestinyCharactersResponse {\n  readonly characters: DictionaryComponentResponse<DestinyCharacterComponent>;\n}\n\nexport async function getDestinyCharacters(user: Tokens | null, profile: Profile | null) {\n  if (!user || !profile) {\n    return;\n  }\n\n  const response: ServerResponse<DestinyCharactersResponse> = await bungieGet(\n    `/Destiny2/${profile.membershipType}/Profile/${profile.membershipId}/`,\n    user,\n    {\n      // @ts-ignore\n      components: [DestinyComponentType.Characters],\n    }\n  );\n\n  const charactersResponse = response.Response;\n  return charactersResponse.characters.data;\n}\n","/* Helpers for storing and retrieving our OAuth tokens from localStorage */\n\n/**\n * An OAuth token, either authorization or refresh.\n */\nexport interface Token {\n  /** The oauth token key */\n  value: string;\n  /** The token expires this many seconds after it is acquired. */\n  expires: number;\n  name: \"access\" | \"refresh\";\n  /** A UTC epoch milliseconds timestamp representing when the token was acquired. */\n  inception: number;\n}\n\nexport interface Tokens {\n  accessToken: Token;\n  refreshToken?: Token;\n  bungieMembershipId: string;\n}\n\n/**\n * This service manages storage and management of saved OAuth\n * authorization and refresh tokens.\n *\n * See https://www.bungie.net/en/Help/Article/45481 for details about\n * Bungie.net OAuth.\n */\n\nconst localStorageKey = \"authorization\";\n\n/**\n * Get all token information from saved storage.\n */\nexport function getToken(): Tokens | null {\n  const tokenString = localStorage.getItem(localStorageKey);\n  return tokenString ? JSON.parse(tokenString) : null;\n}\n\n/**\n * Save all the information about access/refresh tokens.\n */\nexport function setToken(token: Tokens) {\n  localStorage.setItem(localStorageKey, JSON.stringify(token));\n}\n\n/**\n * Clear any saved token information.\n */\nexport function removeToken() {\n  localStorage.removeItem(localStorageKey);\n}\n\n/**\n * Returns whether or not we have a token that could be refreshed.\n */\nexport function hasValidAuthTokens() {\n  const token = getToken();\n  if (!token) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Clear any saved access token information.\n */\nexport function removeAccessToken() {\n  const token = getToken();\n  if (token) {\n    // Force expiration\n    token.accessToken.inception = 0;\n    token.accessToken.expires = 0;\n    setToken(token);\n  }\n}\n\n/**\n * Get an absolute UTC epoch milliseconds timestamp for either the 'expires' property.\n * @return UTC epoch milliseconds timestamp\n */\nfunction getTokenExpiration(token?: Token): number {\n  if (\n    token &&\n    Object.prototype.hasOwnProperty.call(token, \"inception\") &&\n    Object.prototype.hasOwnProperty.call(token, \"expires\")\n  ) {\n    const inception = token.inception;\n    return inception + token.expires * 1000;\n  }\n\n  return 0;\n}\n\n/**\n * Has the token expired, based on its 'expires' property?\n */\nexport function hasTokenExpired(token?: Token) {\n  if (!token) {\n    return true;\n  }\n  const expires = getTokenExpiration(token);\n  const now = Date.now();\n\n  return now > expires;\n}\n","import { createContext, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Profile } from \"../../utils/bungie-api\";\nimport { getToken, hasTokenExpired, removeToken, setToken, Tokens } from \"../../utils/oauth-tokens\";\n\ninterface UserContextValue {\n  user: Tokens | null;\n  setUser: (t: Tokens | null) => void;\n  profile: Profile | null;\n  setProfile: (p: Profile | null) => void;\n}\n\nconst defaultUserContextValue = {\n  user: null,\n  setUser: () => null,\n  profile: null,\n  setProfile: () => null,\n};\n\nexport const UserContext = createContext<UserContextValue>(defaultUserContextValue);\n\nexport const UserContextManager: React.FC = ({ children }) => {\n  const [user, setUserBase] = useState<Tokens | null>(null);\n  const [profile, setProfile] = useState<Profile | null>(null);\n\n  const setUser = useCallback((t: Tokens | null) => {\n    if (t === null) {\n      removeToken();\n    } else {\n      setToken(t);\n    }\n\n    setUserBase(t);\n  }, []);\n\n  // useEffect to \"auto log in\" if user refreshed page\n  // but a token exists in local storage\n  useEffect(() => {\n    const token = getToken();\n    if (!token) {\n      return;\n    }\n\n    if (hasTokenExpired(token.accessToken)) {\n      return;\n    }\n\n    setUserBase(token);\n  }, []);\n\n  const contextValue = useMemo(\n    () => ({\n      user,\n      setUser,\n      profile,\n      setProfile,\n    }),\n    [profile, setUser, user]\n  );\n\n  return <UserContext.Provider value={contextValue}>{children}</UserContext.Provider>;\n};\n","import { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { getManifest } from \"../../utils/bungie-api\";\nimport { UserContext } from \"../user-context\";\n\ninterface Manifest {\n  // DestinyAchievementDefinition: { [x: number]: any };\n  // DestinyActivityDefinition: { [x: number]: any };\n  // DestinyActivityBundleDefinition: { [x: number]: any };\n  // DestinyActivityGraphDefinition: { [x: number]: any };\n  // DestinyActivityInteractableDefinition: { [x: number]: any };\n  // DestinyActivityModeDefinition: { [x: number]: any };\n  // DestinyActivityModifierDefinition: { [x: number]: any };\n  // DestinyActivityTypeDefinition: { [x: number]: any };\n  // DestinyArtDyeChannelDefinition: { [x: number]: any };\n  // DestinyArtDyeReferenceDefinition: { [x: number]: any };\n  // DestinyArtifactDefinition: { [x: number]: any };\n  // DestinyBondDefinition: { [x: number]: any };\n  // DestinyBreakerTypeDefinition: { [x: number]: any };\n  // DestinyCharacterCustomizationCategoryDefinition: { [x: number]: any };\n  // DestinyCharacterCustomizationOptionDefinition: { [x: number]: any };\n  // DestinyChecklistDefinition: { [x: number]: any };\n  DestinyClassDefinition: { [x: number]: any };\n  // DestinyCollectibleDefinition: { [x: number]: any };\n  // DestinyDamageTypeDefinition: { [x: number]: any };\n  // DestinyDestinationDefinition: { [x: number]: any };\n  // DestinyDirectorBookDefinition: { [x: number]: any };\n  // DestinyEnemyRaceDefinition: { [x: number]: any };\n  // DestinyEnergyTypeDefinition: { [x: number]: any };\n  // DestinyEntitlementOfferDefinition: { [x: number]: any };\n  // DestinyEquipmentSlotDefinition: { [x: number]: any };\n  // DestinyFactionDefinition: { [x: number]: any };\n  // DestinyGenderDefinition: { [x: number]: any };\n  // DestinyGrimoireCardDefinition: { [x: number]: any };\n  // DestinyHistoricalStatsDefinition: { [x: number]: any };\n  // DestinyInventoryBucketDefinition: { [x: number]: any };\n  DestinyInventoryItemDefinition: { [x: number]: any };\n  // DestinyInventoryItemLiteDefinition: { [x: number]: any };\n  // DestinyItemCategoryDefinition: { [x: number]: any };\n  // DestinyItemTierTypeDefinition: { [x: number]: any };\n  // DestinyLocationDefinition: { [x: number]: any };\n  // DestinyLoreDefinition: { [x: number]: any };\n  // DestinyMaterialRequirementSetDefinition: { [x: number]: any };\n  // DestinyMedalTierDefinition: { [x: number]: any };\n  // DestinyMetricDefinition: { [x: number]: any };\n  // DestinyMilestoneDefinition: { [x: number]: any };\n  // DestinyNodeStepSummaryDefinition: { [x: number]: any };\n  // DestinyObjectiveDefinition: { [x: number]: any };\n  // DestinyPlaceDefinition: { [x: number]: any };\n  // DestinyPlatformBucketMappingDefinition: { [x: number]: any };\n  // DestinyPlugSetDefinition: { [x: number]: any };\n  // DestinyPowerCapDefinition: { [x: number]: any };\n  // DestinyPresentationNodeDefinition: { [x: number]: any };\n  // DestinyProgressionDefinition: { [x: number]: any };\n  // DestinyProgressionLevelRequirementDefinition: { [x: number]: any };\n  // DestinyProgressionMappingDefinition: { [x: number]: any };\n  // DestinyRaceDefinition: { [x: number]: any };\n  // DestinyRecordDefinition: { [x: number]: any };\n  // DestinyReportReasonCategoryDefinition: { [x: number]: any };\n  // DestinyRewardAdjusterPointerDefinition: { [x: number]: any };\n  // DestinyRewardAdjusterProgressionMapDefinition: { [x: number]: any };\n  // DestinyRewardItemListDefinition: { [x: number]: any };\n  // DestinyRewardMappingDefinition: { [x: number]: any };\n  // DestinyRewardSheetDefinition: { [x: number]: any };\n  // DestinyRewardSourceDefinition: { [x: number]: any };\n  // DestinySackRewardItemListDefinition: { [x: number]: any };\n  // DestinySandboxPatternDefinition: { [x: number]: any };\n  // DestinySandboxPerkDefinition: { [x: number]: any };\n  // DestinyScriptedSkullDefinition: { [x: number]: any };\n  // DestinySeasonDefinition: { [x: number]: any };\n  // DestinySeasonPassDefinition: { [x: number]: any };\n  // DestinySocketCategoryDefinition: { [x: number]: any };\n  // DestinySocketTypeDefinition: { [x: number]: any };\n  // DestinySpecialEventDefinition: { [x: number]: any };\n  // DestinyStatDefinition: { [x: number]: any };\n  // DestinyStatGroupDefinition: { [x: number]: any };\n  // DestinyTalentGridDefinition: { [x: number]: any };\n  // DestinyTraitCategoryDefinition: { [x: number]: any };\n  // DestinyTraitDefinition: { [x: number]: any };\n  // DestinyUnlockCountMappingDefinition: { [x: number]: any };\n  // DestinyUnlockDefinition: { [x: number]: any };\n  // DestinyUnlockEventDefinition: { [x: number]: any };\n  // DestinyUnlockExpressionMappingDefinition: { [x: number]: any };\n  // DestinyUnlockFlagDefinition: { [x: number]: any };\n  // DestinyUnlockValueDefinition: { [x: number]: any };\n  // DestinyVendorDefinition: { [x: number]: any };\n  // DestinyVendorCategoryDefinition: { [x: number]: any };\n  // DestinyVendorGroupDefinition: { [x: number]: any };\n}\n\ninterface ManifestContextValue {\n  manifest: Manifest | null;\n}\n\nconst defaultManifestContextValue = {\n  manifest: null,\n};\n\nexport const ManifestContext = createContext<ManifestContextValue>(defaultManifestContextValue);\n\nexport const ManifestContextManager: React.FC = ({ children }) => {\n  const { user } = useContext(UserContext);\n  const [manifest, setManifest] = useState<Manifest | null>(null);\n\n  useEffect(() => {\n    async function fetchManifest() {\n      const fullManifest = await getManifest(user);\n      // @ts-ignore\n      const reducedManifest: Manifest = {};\n      reducedManifest[\"DestinyClassDefinition\"] = fullManifest.DestinyClassDefinition;\n      reducedManifest[\"DestinyInventoryItemDefinition\"] =\n        fullManifest.DestinyInventoryItemDefinition;\n      setManifest(reducedManifest);\n    }\n\n    if (user) {\n      fetchManifest();\n    }\n  }, [user]);\n\n  const contextValue = useMemo(\n    () => ({\n      manifest,\n    }),\n    [manifest]\n  );\n\n  return <ManifestContext.Provider value={contextValue}>{children}</ManifestContext.Provider>;\n};\n","import { BASE_URL, CLIENT_ID } from \"../constants\";\nimport { Token, Tokens } from \"./oauth-tokens\";\n\nconst TOKEN_URL = `${BASE_URL}/App/OAuth/Token/`;\n\nexport function getAccessTokenFromCode(code: string): Promise<Tokens> {\n  const body = new URLSearchParams({\n    grant_type: \"authorization_code\",\n    code,\n    client_id: CLIENT_ID,\n  });\n  return Promise.resolve(\n    fetch(TOKEN_URL, {\n      method: \"POST\",\n      body,\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n    })\n      .then((response) => (response.ok ? response.json() : Promise.reject(response)))\n      .then(handleAccessToken)\n  );\n}\n\ninterface OAuthResponse {\n  access_token: string;\n  expires_in: number;\n  membership_id: string;\n  refresh_token?: string;\n  refresh_expires_in: number;\n}\n\nfunction handleAccessToken(response: OAuthResponse | undefined): Tokens {\n  if (response?.access_token) {\n    const data = response;\n    const inception = Date.now();\n    const accessToken: Token = {\n      value: data.access_token,\n      expires: data.expires_in,\n      name: \"access\",\n      inception,\n    };\n\n    const tokens: Tokens = {\n      accessToken,\n      bungieMembershipId: data.membership_id,\n    };\n\n    if (data.refresh_token) {\n      tokens.refreshToken = {\n        value: data.refresh_token,\n        expires: data.refresh_expires_in,\n        name: \"refresh\",\n        inception,\n      };\n    }\n\n    return tokens;\n  } else {\n    throw new Error(\"No data or access token in response: \" + JSON.stringify(response));\n  }\n}\n","import { useCallback, useContext, useEffect } from \"react\";\nimport { useNavigate, useSearchParams } from \"react-router-dom\";\nimport { UserContext } from \"../../contexts/user-context\";\nimport { getAccessTokenFromCode } from \"../../utils/oauth\";\n\nexport const Callback = () => {\n  const navigate = useNavigate();\n  const [searchParams] = useSearchParams();\n  const { setUser } = useContext(UserContext);\n\n  const handleAuthReturn = useCallback(\n    async (code: string, state: string) => {\n      const authorizationState = localStorage.getItem(\"authorizationState\");\n      if (!authorizationState) {\n        console.log(\"No stored state :(\");\n        return;\n      }\n\n      if (authorizationState !== state) {\n        console.log(\"State mismatch :(\");\n        return;\n      }\n\n      try {\n        const token = await getAccessTokenFromCode(code);\n        setUser(token);\n        navigate(\"/\");\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [navigate, setUser]\n  );\n\n  useEffect(() => {\n    const code = searchParams.get(\"code\");\n    const state = searchParams.get(\"state\");\n    if (!code) {\n      console.log(\"No auth code from Bungie :(\");\n      return;\n    }\n    if (!state) {\n      console.log(\"No state from Bungie :(\");\n      return;\n    }\n\n    handleAuthReturn(code, state);\n  }, [handleAuthReturn, searchParams]);\n\n  return (\n    <>\n      <div>\n        <h2>Welcome to the callback!</h2>\n      </div>\n    </>\n  );\n};\n","import { useMemo } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { CLIENT_ID } from \"../../constants\";\n\nimport \"./styles.css\";\n\nexport const Login = () => {\n  const authorizationURL = useMemo(() => {\n    const authorizationState = uuidv4();\n    localStorage.setItem(\"authorizationState\", authorizationState);\n    const queryParams = new URLSearchParams({\n      client_id: CLIENT_ID,\n      response_type: \"code\",\n      state: authorizationState,\n    });\n    return `https://www.bungie.net/en/OAuth/Authorize?${queryParams}`;\n  }, []);\n\n  const onLoginClick = () => {\n    console.log(\"login\");\n  };\n\n  return (\n    <a className=\"Login\" rel=\"noopener noreferrer\" onClick={onLoginClick} href={authorizationURL}>\n      Authorize with Bungie.net\n    </a>\n  );\n};\n","import { useContext, useEffect, useState } from \"react\";\nimport { Login } from \"../../components/login\";\nimport { ManifestContext } from \"../../contexts/manifest-context\";\nimport { UserContext } from \"../../contexts/user-context\";\nimport { Characters, getDestinyCharacters, getDestinyProfile } from \"../../utils/bungie-api\";\n\nimport \"./styles.css\";\n\nexport const Home = () => {\n  const { manifest } = useContext(ManifestContext);\n  const { user, setUser, setProfile } = useContext(UserContext);\n  const [characters, setCharacters] = useState<Characters>();\n\n  const onLogoutClick = () => {\n    setUser(null);\n  };\n\n  useEffect(() => {\n    async function getCharacters() {\n      const profile = await getDestinyProfile(user);\n      if (profile) {\n        setProfile(profile);\n        const chars = await getDestinyCharacters(user, profile);\n        if (chars) {\n          console.log(chars);\n          setCharacters(chars);\n        }\n      }\n    }\n\n    // if (user) {\n    //   getCharacters();\n    // }\n  }, [setProfile, user]);\n\n  useEffect(() => {\n    console.log(manifest);\n  }, [manifest]);\n\n  return (\n    <div className=\"Home\">\n      <div className=\"Home-stars\"></div>\n      <div className=\"Home-container\">\n        <h1 className=\"Home-title\">Tempo of Darkness</h1>\n        {user ? (\n          <>\n            <p className=\"Home-text\">\n              Next, choose a character to use on your adventure. Your playthrough will feature items\n              currently equipped on that character, as well as items from your vault:\n            </p>\n            {characters &&\n              Object.entries(characters).map(([id, char]) => (\n                <div key={`char-${id}`}>\n                  <div>{char.light}</div>\n                  <img src={`https://bungie.net${char.emblemBackgroundPath}`} alt=\"char\" />\n                </div>\n              ))}\n            <button onClick={onLogoutClick}>logout</button>\n          </>\n        ) : (\n          <>\n            <p className=\"Home-text\">\n              A Destiny themed, card-based, deck-building, roguelike adventure\n            </p>\n            <p className=\"Home-text\">\n              Tempo of Darkness uses your Destiny characters and vault as the foundation for cards\n              you find in a playthrough. To start an adventure, first allow ToD to view your Destiny\n              info:\n            </p>\n            <Login />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { Link } from \"react-router-dom\";\n\nexport const NotFound = () => {\n  return (\n    <>\n      <div>\n        <h2>Not Found!</h2>\n      </div>\n      <div>\n        <Link to=\"/\">Return home</Link>\n      </div>\n    </>\n  );\n};\n","import { Route, Routes } from \"react-router-dom\";\nimport { ManifestContextManager } from \"./contexts/manifest-context\";\nimport { UserContextManager } from \"./contexts/user-context\";\nimport { Callback } from \"./pages/callback\";\nimport { Home } from \"./pages/home\";\nimport { NotFound } from \"./pages/not-found\";\nimport \"./App.css\";\n\nexport const App = () => {\n  return (\n    <UserContextManager>\n      <ManifestContextManager>\n        <div className=\"App\">\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"/callback\" element={<Callback />} />\n            <Route path=\"*\" element={<NotFound />} />\n          </Routes>\n        </div>\n      </ManifestContextManager>\n    </UserContextManager>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { App } from \"./App\";\nimport \"./index.css\";\n\nconsole.log(process.env.NODE_ENV);\n\nfunction basename() {\n  return process.env.NODE_ENV === \"development\" ? \"/\" : \"/tempo-of-darkness\";\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={basename()}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}